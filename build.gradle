buildscript {
    ext {
        corda_release_version = "4.6"
        corda_gradle_plugins_version = "5.0.12"
        corda_accounts_release_version = "1.0"
        corda_confidential_id_release_version = "1.0"
        kotlin_version = "1.4.21"
        spring_boot_version = "2.0.2.RELEASE"
        spring_boot_gradle_plugin_version = "2.0.2.RELEASE"
    }

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/repositories/releases" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/public" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/jcenter" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://software.r3.com/artifactory/corda" }
        maven { url "https://repo.spring.io/libs-milestone" }
    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'net.corda.plugins.cordapp'
    apply plugin: 'net.corda.plugins.cordformation'
    apply plugin: 'net.corda.plugins.quasar-utils'
    apply from: "$rootDir/repository.gradle"

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters"
        options.encoding = "UTF-8"
    }

    jar {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

dependencies {
    cordapp project(":node")
    cordapp "net.corda:corda-finance-contracts:$corda_release_version"
    cordapp "net.corda:corda-finance-workflows:$corda_release_version"
    cordapp "com.r3.corda.lib.ci:ci-workflows:$corda_confidential_id_release_version"
    cordapp "com.r3.corda.lib.accounts:accounts-contracts:$corda_accounts_release_version"
    cordapp "com.r3.corda.lib.accounts:accounts-workflows:$corda_accounts_release_version"
    cordaCompile "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
    cordaCompile "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
}

task deployNodes(type: Copy, dependsOn: ['generateNodes']) {
    doFirst { project.delete "$projectDir/deploy" }
    from "$projectDir/build"
    into "$projectDir/deploy"
    doLast { project.delete "$projectDir/build" }
}

task generateNodes(type: net.corda.plugins.Cordform, dependsOn: jar) {
    nodeDefaults {
        projectCordapp { deploy = false }
        cordapp("net.corda:corda-finance-contracts:$corda_release_version")
        cordapp("net.corda:corda-finance-workflows:$corda_release_version")
        cordapp("com.r3.corda.lib.ci:ci-workflows:$corda_confidential_id_release_version")
        cordapp("com.r3.corda.lib.accounts:accounts-contracts:$corda_accounts_release_version")
        cordapp("com.r3.corda.lib.accounts:accounts-workflows:$corda_accounts_release_version")
        cordapp project(':node')
        runSchemaMigration = true
    }
    node {
        name "O=Notary,L=Shanghai,C=CN"
        notary = [validating: false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        cordapps.clear()
    }
    node {
        name "O=Donghua,L=Shanghai,C=CN"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[user: "user", "password": "123456", "permissions": ["ALL"]]]
        extraConfig = ["h2Settings.address": "localhost:20041"]
    }
}